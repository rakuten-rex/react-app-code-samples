{"version":3,"sources":["serviceWorker.js","Home.jsx","Page.jsx","Button/index.jsx","Checkbox/index.jsx","Grid/index.jsx","Panel/index.jsx","Password/index.jsx","RadioButton/index.jsx","Select/index.jsx","Stepper/index.jsx","Switch/index.jsx","TextField/index.jsx","Textarea/index.jsx","Track/index.jsx","App.jsx","index.jsx"],"names":["Boolean","window","location","hostname","match","Home","exact","path","rootPath","key","to","map","pageName","Page","main","list","fallback","name","Component","maxWidth","width","parseInt","innerWidth","xs","href","style","float","src","title","alt","id","Index","lazy","App","navigator","serviceWorker","ready","then","registration","unregister","rootElement","document","getElementById","hasChildNodes","hydrate","render"],"mappings":"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","file":"static/js/main.2d2552f0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { Route, Switch as RouterSwitch, Link as RouterLink } from 'react-router-dom';\nimport { rootPath } from './App';\nimport { Row, Container, Col } from '@rakuten-rex/grid/Grid';\n\nexport default function Home() {\n  const pages = [\n    'Button',\n    'Checkbox',\n    'Grid',\n    'Panel',\n    'Password',\n    'RadioButton',\n    'Select',\n    'Stepper',\n    'Switch',\n    'TextField',\n    'Textarea',\n    'Track',\n  ];\n\n  return (\n    <RouterSwitch>\n      <Route exact path={rootPath}>\n        <Container>\n          <Row key='breadcrumbs'>\n            <Col>\n              <RouterLink to={rootPath}>Home</RouterLink>\n            </Col>\n          </Row>\n          <Row key='title'>\n            <Col>\n              <h1>ReX Front-end Components Library <small>React Code Samples</small></h1>\n            </Col>\n          </Row>\n          <Row key='index'>\n            <Col>\n              <h2>Forms</h2>\n              <ul>\n                {\n                  pages.map(pageName => {\n                    return (\n                      <li key={`page-${pageName}`}>\n                        <RouterLink to={`${rootPath}/${pageName}`}>{pageName}</RouterLink>\n                      </li>\n                    );\n                  })\n                }\n              </ul>\n            </Col>\n          </Row>\n        </Container>\n      </Route>\n    </RouterSwitch>\n  )\n}\n","import React, { Suspense } from 'react';\nimport { Route, Switch as RouterSwitch, Link as RouterLink } from 'react-router-dom';\nimport { rootPath } from './App';\nimport { Row, Container, Col } from '@rakuten-rex/grid/Grid';\n\nexport default function Page(main, list) {\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <RouterSwitch>\n        {/* Main route */}\n        <Route exact path={`${rootPath}/${main}`}>\n          <Container>\n            <Row key='breadcrumbs'>\n              <Col>\n                <RouterLink to={rootPath}>Home</RouterLink>\n                {` / `}\n                {main}\n              </Col>\n            </Row>\n            <Row key='title'>\n              <Col>\n                <h1>{main}</h1>\n              </Col>\n            </Row>\n            <Row key='index'>\n              <Col>\n                <ul>\n                  {\n                    list.map(({ name }) => {\n                      return (\n                        <li key={`page-content-${name}`}>\n                          <RouterLink to={`${rootPath}/${main}/${name}`}>{name}</RouterLink>\n                        </li>\n                      )\n                    })\n                  }\n                </ul>\n              </Col>\n            </Row>\n          </Container>\n        </Route>\n        {/* Components variations routes */}\n        {\n          list.map(({ name, Component, maxWidth = '25%' }) => {\n            const width = parseInt(window.innerWidth) <= 425 ? '100%' : maxWidth;\n            const githubUrl = 'https://github.com/rakuten-rex/react-app-code-samples/blob/master/src';\n            const githubLogo = 'https://cdnjs.cloudflare.com/ajax/libs/octicons/8.5.0/svg/mark-github.svg';\n\n            return (\n              <Route path={`${rootPath}/${main}/${name}`} key={`route-${name}`}>\n                <Container>\n                  <Row key='breadcrumbs'>\n                    <Col>\n                      <RouterLink to={rootPath}>Home</RouterLink>\n                      {` / `}\n                      <RouterLink to={`${rootPath}/${main}`}>{main}</RouterLink>\n                      {` / `}\n                      {name}\n                    </Col>\n                  </Row>\n                  <Row key='title'>\n                    <Col xs='10'>\n                      <h1>{name}</h1>\n                    </Col>\n                    <Col xs='2'>\n                      <a href={`${githubUrl}/${main}/${name}.jsx`} style={{ float: 'right' }}>\n                        <img src={githubLogo} width=\"20\" title=\"Github Source Code\" alt=\"Github Source Code\" />\n                      </a>\n                    </Col>\n                  </Row>\n                  <div id=\"react-code-sample\" style={{ width }}>\n                    <Component />\n                  </div>\n                </Container>\n              </Route>\n            )\n          })\n        }\n      </RouterSwitch>\n    </Suspense>\n  );\n}\n","import { lazy } from 'react';\nimport Page from '../Page';\n\nexport default function Index() {\n  return Page('Button', [\n    {\n      name: 'Default',\n      Component: lazy(() => import('./Default'))\n    },\n    {\n      name: 'OutlineButton',\n      Component: lazy(() => import('./OutlineButton'))\n    },\n  ]);\n}\n","import { lazy } from 'react';\nimport Page from '../Page';\n\nexport default function Index() {\n  return Page('Checkbox', [\n    {\n      name: 'Default',\n      Component: lazy(() => import('./Default'))\n    },\n  ]);\n}\n","import { lazy } from 'react';\nimport Page from '../Page';\n\nexport default function Index() {\n  return Page('Grid', [\n    {\n      name: 'Default',\n      Component: lazy(() => import('./Default')),\n      maxWidth: '100%',\n    },\n  ]);\n}\n","import { lazy } from 'react';\nimport Page from '../Page';\n\nexport default function Index() {\n  return Page('Panel', [\n    {\n      name: 'Default',\n      Component: lazy(() => import('./Default'))\n    },\n  ]);\n}\n","import { lazy } from 'react';\nimport Page from '../Page';\n\nexport default function Index() {\n  return Page('Password', [\n    {\n      name: 'Default',\n      Component: lazy(() => import('./Default'))\n    },\n  ]);\n}\n","import { lazy } from 'react';\nimport Page from '../Page';\n\nexport default function Index() {\n  return Page('RadioButton', [\n    {\n      name: 'Default',\n      Component: lazy(() => import('./Default')),\n      maxWidth: '100%',\n    },\n  ]);\n}\n","import { lazy } from 'react';\nimport Page from '../Page';\n\nexport default function Index() {\n  return Page('Select', [\n    {\n      name: 'Default',\n      Component: lazy(() => import('./Default'))\n    },\n  ]);\n}\n","import { lazy } from 'react';\nimport Page from '../Page';\n\nexport default function Index() {\n  return Page('Stepper', [\n    {\n      name: 'Default',\n      Component: lazy(() => import('./Default')),\n      maxWidth: '15%',\n    },\n  ]);\n}\n","import { lazy } from 'react';\nimport Page from '../Page';\n\nexport default function Index() {\n  return Page('Switch', [\n    {\n      name: 'Default',\n      Component: lazy(() => import('./Default'))\n    },\n  ]);\n}\n","import { lazy } from 'react';\nimport Page from '../Page';\n\nexport default function Index() {\n  return Page('TextField', [\n    {\n      name: 'Default',\n      Component: lazy(() => import('./Default'))\n    },\n  ]);\n}\n","import { lazy } from 'react';\nimport Page from '../Page';\n\nexport default function Index() {\n  return Page('Textarea', [\n    {\n      name: 'Default',\n      Component: lazy(() => import('./Default'))\n    },\n  ]);\n}\n","import { lazy } from 'react';\nimport Page from '../Page';\n\nexport default function Index() {\n  return Page('Track', [\n    {\n      name: 'Default',\n      Component: lazy(() => import('./Default')),\n      maxWidth: '100%',\n    },\n  ]);\n}\n","/* eslint-disable import/no-extraneous-dependencies */\nimport React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Home from './Home';\nimport Button from './Button';\nimport Checkbox from './Checkbox';\nimport Grid from './Grid';\nimport Panel from './Panel';\nimport Password from './Password';\nimport RadioButton from './RadioButton';\nimport Select from './Select';\nimport Stepper from './Stepper';\nimport Switch from './Switch';\nimport TextField from './TextField';\nimport Textarea from './Textarea';\nimport Track from './Track';\n\nexport const rootPath = '/react-app-code-samples';\n\nexport default function App() {\n  return (\n    <Router>\n      {/* Home Routing */}\n      <Home rootPath={rootPath} />\n      {/* Components Pages Routing */}\n      <Button />\n      <Checkbox />\n      <Grid />\n      <Panel />\n      <Password />\n      <RadioButton />\n      <Select />\n      <Stepper />\n      <Switch />\n      <TextField />\n      <Textarea />\n      <Track />\n    </Router>\n  );\n}\n","/* eslint-disable import/no-extraneous-dependencies */\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport { unregister } from './serviceWorker';\nimport App from './App';\n\nunregister();\n\nconst rootElement = document.getElementById('root');\nif (rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n"],"sourceRoot":""}