{"version":3,"sources":["../../node_modules/@rakuten-rex/grid/Grid/sass/_styles.mixin.scss","example-util.scss"],"names":[],"mappings":"AAAA;;;;;;;CCOC,CACD,kBDiaE,6BAA8B,CAG9B,yCAA6C,CAC7C,kCAAmC,CACnC,iCAAkC,CAGlC,2KAEqC,CACrC,cAAe,CACf,eAAgB,CAChB,UAAc,CACd,eAAgB,CAChB,wBAAyB,CC9azB,yBAA0B,CAC1B,qBAAsB,CAGxB,yFD8aE,wBAAyB,CACzB,yBAA0B,CAC1B,qBC9ayB,CAF3B,sBD2ZE,6BAA8B,CAG9B,yCAA6C,CAC7C,kCAAmC,CACnC,iCAAkC,CAGlC,2KAEqC,CACrC,cAAe,CACf,eAAgB,CAChB,UAAc,CACd,eAAgB,CAChB,wBAAyB,CCxazB,wBAAyB,CAF3B,yDDsbI,wBAAyB,CACzB,yBAA0B,CAC1B,qBAAsB,CCxb1B,2BAKI,wBAAyB,CACzB,aAAc,CACd,WAAY,CACZ,iBAAkB,CAClB,yBAA0B","file":"97.9025de79.chunk.css","sourcesContent":["/*!\n* @license @rakuten-rex/grid v1.6.0 2020-07-01\n* _styles.mixin.scss\n*\n* Copyright (c) 2018-present, Rakuten, Inc.\n*\n* This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.\n*/\n// Bootstrap functions\n//\n// Utility mixins and functions for evaluating source code across our variables, maps, and mixins.\n\n// Ascending\n// Used to evaluate Sass maps like our grid breakpoints.\n@mixin _assert-ascending($map, $map-name) {\n  $prev-key: null;\n  $prev-num: null;\n  @each $key, $num in $map {\n    @if $prev-num == null or unit($num) == \"%\" or unit($prev-num) == \"%\" {\n      // Do nothing\n    } @else if not comparable($prev-num, $num) {\n      @warn \"Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !\";\n    } @else if $prev-num >= $num {\n      @warn \"Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !\";\n    }\n    $prev-key: $key;\n    $prev-num: $num;\n  }\n}\n\n// Starts at zero\n// Used to ensure the min-width of the lowest breakpoint starts at 0.\n@mixin _assert-starts-at-zero($map, $map-name: \"$grid-breakpoints\") {\n  $values: map-values($map);\n  $first-value: nth($values, 1);\n  @if $first-value != 0 {\n    @warn \"First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.\";\n  }\n}\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next(\n  $name,\n  $breakpoints,\n  $breakpoint-names: map-keys($breakpoints)\n) {\n  $n: index($breakpoint-names, $name);\n  @return if(\n    $n != null and $n < length($breakpoint-names),\n    nth($breakpoint-names, $n + 1),\n    null\n  );\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - 0.02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n/// Grid system\n//\n// Generate semantic grid columns with these mixins.\n\n@mixin make-container($gutter) {\n  width: 100%;\n  margin-right: auto;\n  margin-left: auto;\n  padding: 0;\n  overflow: hidden;\n}\n\n// For each breakpoint, define the maximum width of the container in a media query\n@mixin make-container-max-widths($max-widths, $breakpoints) {\n  @each $breakpoint, $container-max-width in $max-widths {\n    @include media-breakpoint-up($breakpoint, $breakpoints) {\n      max-width: $container-max-width;\n    }\n  }\n}\n\n@mixin make-row($gutter) {\n  display: flex;\n  flex-wrap: wrap;\n  margin-right: -$gutter / 2;\n  margin-left: -$gutter / 2;\n}\n\n@mixin make-col($size, $columns) {\n  flex: 0 0 percentage($size / $columns);\n  // Add a `max-width` to ensure content within each column does not blow out\n  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari\n  // do not appear to require this.\n  max-width: percentage($size / $columns);\n}\n\n@mixin make-col-auto() {\n  flex: 0 0 auto;\n  width: auto;\n  max-width: 100%; // Reset earlier grid tiers\n}\n\n@mixin make-col-offset($size, $columns) {\n  $num: $size / $columns;\n  margin-left: if($num == 0, 0, percentage($num));\n}\n\n// Row columns\n//\n// Specify on a parent element(e.g., .row) to force immediate children into NN\n// numberof columns. Supports wrapping to new lines, but does not do a Masonry\n// style grid.\n@mixin row-cols($count) {\n  & > * {\n    flex: 0 0 100% / $count;\n    max-width: 100% / $count;\n  }\n}\n// Framework grid generation\n//\n// Used only by Bootstrap to generate the correct number of grid classes given\n// any value of `$grid-columns`.\n\n@mixin make-grid-columns(\n  $grid-prefix,\n  $columns,\n  $gutter,\n  $breakpoints,\n  $grid-row-columns\n) {\n  // Common properties for all breakpoints\n  %grid-column {\n    position: relative;\n    width: 100%;\n    padding-right: $gutter / 2;\n    padding-left: $gutter / 2;\n  }\n\n  @each $breakpoint in map-keys($breakpoints) {\n    $infix: breakpoint-infix($breakpoint, $breakpoints);\n\n    // Allow columns to stretch full width below their breakpoints\n    @for $i from 1 through $columns {\n      .#{$grid-prefix}-col#{$infix}-#{$i} {\n        @extend %grid-column;\n      }\n    }\n    .#{$grid-prefix}-col#{$infix},\n    .#{$grid-prefix}-col#{$infix}-auto {\n      @extend %grid-column;\n    }\n\n    @include media-breakpoint-up($breakpoint, $breakpoints) {\n      // Provide basic `.col-{bp}` classes for equal-width flexbox columns\n      .#{$grid-prefix}-col#{$infix} {\n        flex-basis: 0;\n        flex-grow: 1;\n        max-width: 100%;\n      }\n\n      @for $i from 1 through $grid-row-columns {\n        .#{$grid-prefix}-row-cols#{$infix}-#{$i} {\n          @include row-cols($i);\n        }\n      }\n\n      .#{$grid-prefix}-col#{$infix}-auto {\n        @include make-col-auto();\n      }\n\n      @for $i from 1 through $columns {\n        .#{$grid-prefix}-col#{$infix}-#{$i} {\n          @include make-col($i, $columns);\n        }\n      }\n\n      .#{$grid-prefix}-order#{$infix}-first {\n        order: -1;\n      }\n\n      .#{$grid-prefix}-order#{$infix}-last {\n        order: $columns + 1;\n      }\n\n      @for $i from 0 through $columns {\n        .#{$grid-prefix}-order#{$infix}-#{$i} {\n          order: $i;\n        }\n      }\n\n      // `$columns - 1` because offsetting by the width of an entire row isn't possible\n      @for $i from 0 through ($columns - 1) {\n        @if not($infix == \"\" and $i == 0) {\n          // Avoid emitting useless .offset-0\n          .#{$grid-prefix}-offset#{$infix}-#{$i} {\n            @include make-col-offset($i, $columns);\n          }\n        }\n      }\n    }\n  }\n}\n// ReX Grid System\n\n// Code forked and customized from SASS version of bootstrap-4.4.1\n// https://getbootstrap.com/\n\n@mixin rex-grid(\n  $rex-grid-prefix,\n  $rex-grid-gutter-width,\n  $rex-grid-container-max-widths,\n  $rex-grid-breakpoints,\n  $rex-grid-columns,\n  $rex-grid-row-columns,\n  $rex-grid-displays\n) {\n  [class^=\"#{$rex-grid-prefix}\"] {\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    -o-box-sizing: border-box;\n    -ms-box-sizing: border-box;\n    box-sizing: border-box;\n\n    &:before,\n    &:after {\n      -webkit-box-sizing: border-box;\n      -moz-box-sizing: border-box;\n      -o-box-sizing: border-box;\n      -ms-box-sizing: border-box;\n      box-sizing: border-box;\n    }\n  }\n\n  .#{$rex-grid-prefix}-container {\n    @include rex-grid-container(\n      $rex-grid-prefix,\n      $rex-grid-gutter-width,\n      $rex-grid-container-max-widths,\n      $rex-grid-breakpoints\n    );\n  }\n\n  .#{$rex-grid-prefix}-container-fluid {\n    @include rex-grid-container-fluid($rex-grid-gutter-width);\n  }\n\n  .#{$rex-grid-prefix}-no-gutters {\n    .#{$rex-grid-prefix}-row {\n      margin-right: 0;\n      margin-left: 0;\n\n      > .#{$rex-grid-prefix}-col,\n      > [class*=\"#{$rex-grid-prefix}-col-\"] {\n        padding-right: 0;\n        padding-left: 0;\n      }\n    }\n  }\n\n  .#{$rex-grid-prefix}-row {\n    @include rex-grid-row($rex-grid-gutter-width);\n  }\n\n  @include rex-grid-colums(\n    $rex-grid-prefix,\n    $rex-grid-columns,\n    $rex-grid-gutter-width,\n    $rex-grid-breakpoints,\n    $rex-grid-row-columns\n  );\n\n  @include rex-grid-display(\n    $rex-grid-prefix,\n    $rex-grid-breakpoints,\n    $rex-grid-displays\n  );\n}\n\n@mixin rex-grid-container(\n  $rex-grid-prefix,\n  $rex-grid-gutter-width,\n  $rex-grid-container-max-widths,\n  $rex-grid-breakpoints\n) {\n  @include make-container($rex-grid-gutter-width);\n  @include make-container-max-widths(\n    $rex-grid-container-max-widths,\n    $rex-grid-breakpoints\n  );\n}\n\n@mixin rex-grid-container-fluid($rex-grid-gutter-width) {\n  @include make-container($rex-grid-gutter-width);\n}\n\n@mixin rex-grid-row($rex-grid-gutter-width) {\n  @include make-row($rex-grid-gutter-width);\n}\n\n@mixin rex-grid-colums(\n  $rex-grid-prefix,\n  $rex-grid-columns,\n  $rex-grid-gutter-width,\n  $rex-grid-breakpoints,\n  $rex-grid-row-columns\n) {\n  @include make-grid-columns(\n    $rex-grid-prefix,\n    $rex-grid-columns,\n    $rex-grid-gutter-width,\n    $rex-grid-breakpoints,\n    $rex-grid-row-columns\n  );\n}\n@mixin rex-core {\n  -webkit-text-size-adjust: 100%;\n\n  // html\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n\n  // body\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n    \"Ubuntu\", \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\",\n    \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  font-size: 1rem;\n  line-height: 1.5;\n  color: #333333;\n  text-align: left;\n  background-color: inherit;\n\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  -o-box-sizing: border-box;\n  -ms-box-sizing: border-box;\n  box-sizing: border-box;\n\n  &:before,\n  &:after {\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    -o-box-sizing: border-box;\n    -ms-box-sizing: border-box;\n    box-sizing: border-box;\n  }\n}\n// stylelint-disable declaration-no-important\n\n//\n// Utilities for common `display` values\n//\n@mixin rex-grid-display($grid-prefix, $grid-breakpoints, $displays) {\n  @each $breakpoint in map-keys($grid-breakpoints) {\n    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {\n      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);\n\n      @each $value in $displays {\n        .#{$grid-prefix}-d#{$infix}-#{$value} {\n          display: $value !important;\n        }\n      }\n    }\n  }\n}\n","@import \"@rakuten-rex/grid/Grid/sass/_styles.mixin.scss\";\n\n/* \nThe following styles are provided to visualize the Grid breakpoints\nThe classNames `rex-grid-example` and `rex-grid-row-example` are not required\nfor production usage.\n*/\n\n.rex-grid-example {\n  @include rex-core();\n  border: 1px dashed #82A3FF;\n  background-color: #fff;\n}\n\n.rex-grid-row-example {\n  @include rex-core();\n  background-color: #E8EEFF;\n  \n  span {\n    background-color: #C9D7FF;\n    display: block;\n    height: 8rem;\n    text-align: center;\n    border: 1px dashed #A0B9FF;\n  }\n}\n"]}